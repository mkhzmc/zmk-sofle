#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        cf1 {
            bindings = <&kp F1>;
            key-positions = <1 14>;
            layers = <0>;
        };

        cf2 {
            bindings = <&kp F2>;
            key-positions = <15 2>;
            layers = <0>;
        };

        cf3 {
            bindings = <&kp F3>;
            key-positions = <16 3>;
            layers = <0>;
        };

        cf4 {
            bindings = <&kp F4>;
            key-positions = <4 17>;
            layers = <0>;
        };

        cf5 {
            bindings = <&kp F5>;
            key-positions = <5 18>;
            layers = <0>;
        };

        cf6 {
            bindings = <&kp F6>;
            key-positions = <20 7>;
            layers = <0>;
        };

        cf7 {
            bindings = <&kp F7>;
            key-positions = <8 21>;
            layers = <0>;
        };

        cf8 {
            bindings = <&kp F8>;
            key-positions = <9 22>;
            layers = <0>;
        };

        cf9 {
            bindings = <&kp F9>;
            key-positions = <10 23>;
            layers = <0>;
        };

        cf10 {
            bindings = <&kp F10>;
            key-positions = <11 24>;
            layers = <0>;
        };

        cf11 {
            bindings = <&kp F11>;
            key-positions = <0 13>;
            layers = <0>;
        };

        cf12 {
            bindings = <&kp F12>;
            key-positions = <12 25>;
            layers = <0>;
        };

        cminus {
            bindings = <&kp MINUS>;
            key-positions = <23 24>;
            layers = <0>;
        };

        cequal {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
            layers = <0>;
        };

        cleftbracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <36 37>;
            layers = <0>;
        };

        crightbracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <37 38>;
            layers = <0>;
        };

        cgrave {
            bindings = <&kp GRAVE>;
            key-positions = <13 14>;
            layers = <0>;
        };

        cmult {
            bindings = <&kp KP_ASTERISK>;
            key-positions = <29 28>;
            layers = <3>;
        };

        cslash {
            bindings = <&kp KP_SLASH>;
            key-positions = <16 15>;
            layers = <3>;
        };

        cca {
            bindings = <&kp LC(LEFT_ALT)>;
            key-positions = <53 63>;
            layers = <0>;
            slow-release;
            timeout-ms = <80>;
        };
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp ESC     &kp N1     &kp N2        &kp N3        &kp N4     &kp N5    &kp UP_ARROW     &kp N6  &kp N7     &kp N8     &kp N9           &kp N0      &kp BACKSPACE
&kp TAB     &kp Q      &kp W         &kp E         &kp R      &kp T     &kp DOWN_ARROW   &kp Y   &kp U      &kp I      &kp O            &kp P       &kp BSLH
&kp CAPS    &kp A      &kp S         &kp D         &kp F      &kp G     &kp LEFT_ARROW   &kp H   &kp J      &kp K      &kp L            &kp SEMI    &kp APOS
&kp LSHFT   &kp Z      &kp X         &kp C         &kp V      &kp B     &kp RIGHT_ARROW  &kp N   &kp M      &kp COMMA  &kp DOT          &kp FSLH    &kp ENTER
&kp C_MUTE  &kp LCTRL  &kp LEFT_GUI  &kp LEFT_ALT  &kp SPACE  &mo 1     &kp ENTER        &mo 2   &kp SPACE  &kp ENTER  &kp RIGHT_SHIFT  &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "0";
            label = "0";
        };

        layer_1 {
            bindings = <
&trans           &kp F1           &kp F2           &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6                            &kp F7          &kp F8        &kp F9     &kp F10     &trans
&trans           &trans           &mkp LCLK        &mkp MCLK        &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN   &kp PG_UP                         &kp PG_DN       &kp HOME      &kp END    &kp INSERT  &trans
&trans           &trans           &trans           &trans           &trans           &mkp MB5           &mmv MOVE_LEFT   &kp LEFT_ARROW                    &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &kp DEL     &trans
&rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_SPI  &rgb_ug RGB_SPD  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD    &mmv MOVE_RIGHT  &rgb_ug RGB_COLOR_HSB(209,81,77)  &trans          &trans        &trans     &trans      &trans
&kp C_MUTE       &trans           &trans           &trans           &trans           &trans             &mkp LCLK        &trans                            &trans          &trans        &trans     &trans
            >;

            display-name = "1";
            sensor-bindings = <&scroll_encoder>;
            label = "1";
        };

        layer_2 {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &trans  &trans  &trans      &trans     &trans       &trans
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &trans      &trans     &trans       &trans
&trans     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &trans       &trans
&trans     &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
&trans     &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans  &trans  &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
            label = "2";
        };

        layer_3 {
            bindings = <
&trans  &trans  &kp KP_NUMLOCK  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp KP_MINUS    &kp KP_N7  &kp KP_N8  &kp KP_N9    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp KP_PLUS     &kp KP_N4  &kp KP_N5  &kp KP_N6    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp KP_N0       &kp KP_N1  &kp KP_N2  &kp KP_N3    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans          &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
            label = "3";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        con3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
